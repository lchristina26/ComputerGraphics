/****************************************************************************
**
** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the QtCanvas3D module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 3 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPLv3 included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 3 requirements
** will be met: https://www.gnu.org/licenses/lgpl.html.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 2.0 or later as published by the Free 
** Software Foundation and appearing in the file LICENSE.GPL included in 
** the packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 2.0 requirements will be
** met: http://www.gnu.org/licenses/gpl-2.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \example texturedcube
    \since QtCanvas3D 1.0
    \title Textured Cube Example
    \ingroup qtcanvas3d-examples
    \brief A simple textured cube

    The Textured Cube example shows how to create a simple Canvas3D displaying a single moving
    textured cube.

    \image texturedcube-example.png

    \section1 Creating Canvas3D

    We'll add a Canvas3D component into the main component:

    \snippet texturedcube/qml/texturedcube/main.qml 0
    \dots

    Inside it, we catch the \c initGL and \c renderGL signals to forward the initialization
    and rendering calls to the js object:

    \snippet texturedcube/qml/texturedcube/main.qml 1

    \section1 The JavaScript Object

    First we import the js object in the QML:

    \snippet texturedcube/qml/texturedcube/main.qml 4

    In the \c initGL function of the js object, we initialize the OpenGL state. We also create the
    TextureImage and register handlers for image load success and fail signals. In the case of
    load success the OpenGL texture is created and the loaded image is used to fill the texture
    with pixel data:

    \snippet texturedcube/qml/texturedcube/texturedcube.js 0

    The \c renderGL function does the actual drawing into the canvas:

    \snippet texturedcube/qml/texturedcube/texturedcube.js 1

    \section1 The Animation

    Animating the cube is done simply by adding a \c SequantialAnimation for different Canvas3D
    properties. Here's one as an example, affecting the x rotation of the cube:

    \snippet texturedcube/qml/texturedcube/main.qml 5

 */
